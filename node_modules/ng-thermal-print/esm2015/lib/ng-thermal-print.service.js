import { StarPrintBuilder } from './builders/StarPrintBuilder';
import { WebPrintBuilder } from './builders/WebPrintBuilder';
import { PrintBuilder } from './builders/PrintBuilder';
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { EscBuilder } from './builders/EscBuilder';
import * as i0 from "@angular/core";
export class PrintService extends PrintBuilder {
    constructor() {
        super();
        this.isConnected = new BehaviorSubject(false);
    }
    /**
     *
     * @param driver UsbDriver | WebPrintDriver
     * @param printLanguage ESC/POS | StarPRNT | WebPRNT
     */
    setDriver(driver, printLanguage = 'ESC/POS') {
        this.driver = driver;
        this.printLanguage = printLanguage;
        this.driver.connect();
        this.driver.isConnected.subscribe(result => {
            this.isConnected.next(result);
        });
        return this;
    }
    /**
     * Initialize a new print queue
     */
    init() {
        if (!this.driver) {
            throw "Cannot initiate the print service.  No connection detected.";
        }
        switch (this.printLanguage) {
            case 'WebPRNT':
                this.builder = new WebPrintBuilder();
                break;
            case 'StarPRNT':
                this.builder = new StarPrintBuilder();
                break;
            default:
                this.builder = new EscBuilder();
                break;
        }
        this.builder.init();
        return this;
    }
    /**
     *
     * @param cutType full|partial
     */
    cut(cutType = 'full') {
        this.builder.cut(cutType);
        return this;
    }
    /**
     *
     * @param lineCount How many lines to feed
     */
    feed(lineCount = 1) {
        this.builder.feed(lineCount);
        return this;
    }
    setInverse(value = true) {
        this.builder.setInverse(value);
        return this;
    }
    setBold(value = true) {
        this.builder.setBold(value);
        return this;
    }
    setUnderline(value = true) {
        this.builder.setUnderline(value);
        return this;
    }
    /**
     *
     * @param value left|center\right
     */
    setJustification(value = 'left') {
        this.builder.setJustification(value);
        return this;
    }
    /**
     *
     * @param value normal|large
     */
    setSize(value = 'normal') {
        this.builder.setSize(value);
        return this;
    }
    /**
     *
     * @param text
     */
    writeLine(text = '') {
        this.builder.writeLine(text);
        return this;
    }
    /**
     * write the current builder value to the driver and clear out the builder
     */
    flush() {
        this.driver.write(this.builder.flush());
    }
}
PrintService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PrintService_Factory() { return new PrintService(); }, token: PrintService, providedIn: "root" });
PrintService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PrintService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdGhlcm1hbC1wcmludC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctdGhlcm1hbC1wcmludC9zcmMvbGliL25nLXRoZXJtYWwtcHJpbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBS25ELE1BQU0sT0FBTyxZQUFhLFNBQVEsWUFBWTtJQU01QztRQUNFLEtBQUssRUFBRSxDQUFDO1FBSkgsZ0JBQVcsR0FBNkIsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7SUFLbkYsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxTQUFTLENBQUMsTUFBbUIsRUFBRSxnQkFBd0IsU0FBUztRQUM5RCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXRCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN6QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSTtRQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLE1BQU0sNkRBQTZELENBQUM7U0FDckU7UUFFRCxRQUFRLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDMUIsS0FBSyxTQUFTO2dCQUNaLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQztnQkFDckMsTUFBTTtZQUNSLEtBQUssVUFBVTtnQkFDYixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztnQkFDdEMsTUFBTTtZQUNSO2dCQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztnQkFDaEMsTUFBTTtTQUNUO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNwQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7O09BR0c7SUFDSSxHQUFHLENBQUMsVUFBa0IsTUFBTTtRQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7O09BR0c7SUFDSSxJQUFJLENBQUMsWUFBb0IsQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxVQUFVLENBQUMsUUFBaUIsSUFBSTtRQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQztJQUVkLENBQUM7SUFFRCxPQUFPLENBQUMsUUFBaUIsSUFBSTtRQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQztJQUVkLENBQUM7SUFFRCxZQUFZLENBQUMsUUFBaUIsSUFBSTtRQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxPQUFPLElBQUksQ0FBQztJQUVkLENBQUM7SUFFRDs7O09BR0c7SUFDSCxnQkFBZ0IsQ0FBQyxRQUFnQixNQUFNO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsT0FBTyxDQUFDLFFBQWdCLFFBQVE7UUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsU0FBUyxDQUFDLE9BQWUsRUFBRTtRQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7OztZQTFIRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFyUHJpbnRCdWlsZGVyIH0gZnJvbSAnLi9idWlsZGVycy9TdGFyUHJpbnRCdWlsZGVyJztcbmltcG9ydCB7IFdlYlByaW50QnVpbGRlciB9IGZyb20gJy4vYnVpbGRlcnMvV2ViUHJpbnRCdWlsZGVyJztcbmltcG9ydCB7IFByaW50QnVpbGRlciB9IGZyb20gJy4vYnVpbGRlcnMvUHJpbnRCdWlsZGVyJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJpbnREcml2ZXIgfSBmcm9tICcuL2RyaXZlcnMvUHJpbnREcml2ZXInO1xuaW1wb3J0IHsgRXNjQnVpbGRlciB9IGZyb20gJy4vYnVpbGRlcnMvRXNjQnVpbGRlcic7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFByaW50U2VydmljZSBleHRlbmRzIFByaW50QnVpbGRlciB7XG4gIHB1YmxpYyBwcmludExhbmd1YWdlOiBzdHJpbmc7XG4gIHB1YmxpYyBkcml2ZXI6IFByaW50RHJpdmVyO1xuICBwdWJsaWMgaXNDb25uZWN0ZWQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xuICBwdWJsaWMgYnVpbGRlcjogUHJpbnRCdWlsZGVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGRyaXZlciBVc2JEcml2ZXIgfCBXZWJQcmludERyaXZlclxuICAgKiBAcGFyYW0gcHJpbnRMYW5ndWFnZSBFU0MvUE9TIHwgU3RhclBSTlQgfCBXZWJQUk5UXG4gICAqL1xuICBzZXREcml2ZXIoZHJpdmVyOiBQcmludERyaXZlciwgcHJpbnRMYW5ndWFnZTogc3RyaW5nID0gJ0VTQy9QT1MnKTogUHJpbnRTZXJ2aWNlIHtcbiAgICB0aGlzLmRyaXZlciA9IGRyaXZlcjtcbiAgICB0aGlzLnByaW50TGFuZ3VhZ2UgPSBwcmludExhbmd1YWdlO1xuICAgIHRoaXMuZHJpdmVyLmNvbm5lY3QoKTtcblxuICAgIHRoaXMuZHJpdmVyLmlzQ29ubmVjdGVkLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICAgdGhpcy5pc0Nvbm5lY3RlZC5uZXh0KHJlc3VsdCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGEgbmV3IHByaW50IHF1ZXVlXG4gICAqL1xuICBpbml0KCk6IFByaW50U2VydmljZSB7XG4gICAgaWYgKCF0aGlzLmRyaXZlcikge1xuICAgICAgdGhyb3cgXCJDYW5ub3QgaW5pdGlhdGUgdGhlIHByaW50IHNlcnZpY2UuICBObyBjb25uZWN0aW9uIGRldGVjdGVkLlwiO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5wcmludExhbmd1YWdlKSB7XG4gICAgICBjYXNlICdXZWJQUk5UJzpcbiAgICAgICAgdGhpcy5idWlsZGVyID0gbmV3IFdlYlByaW50QnVpbGRlcigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1N0YXJQUk5UJzpcbiAgICAgICAgdGhpcy5idWlsZGVyID0gbmV3IFN0YXJQcmludEJ1aWxkZXIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLmJ1aWxkZXIgPSBuZXcgRXNjQnVpbGRlcigpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLmJ1aWxkZXIuaW5pdCgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBjdXRUeXBlIGZ1bGx8cGFydGlhbFxuICAgKi9cbiAgcHVibGljIGN1dChjdXRUeXBlOiBzdHJpbmcgPSAnZnVsbCcpOiBQcmludFNlcnZpY2Uge1xuICAgIHRoaXMuYnVpbGRlci5jdXQoY3V0VHlwZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGxpbmVDb3VudCBIb3cgbWFueSBsaW5lcyB0byBmZWVkXG4gICAqL1xuICBwdWJsaWMgZmVlZChsaW5lQ291bnQ6IG51bWJlciA9IDEpOiBQcmludFNlcnZpY2Uge1xuICAgIHRoaXMuYnVpbGRlci5mZWVkKGxpbmVDb3VudCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRJbnZlcnNlKHZhbHVlOiBib29sZWFuID0gdHJ1ZSk6IFByaW50U2VydmljZSB7XG4gICAgdGhpcy5idWlsZGVyLnNldEludmVyc2UodmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xuXG4gIH1cblxuICBzZXRCb2xkKHZhbHVlOiBib29sZWFuID0gdHJ1ZSk6IFByaW50U2VydmljZSB7XG4gICAgdGhpcy5idWlsZGVyLnNldEJvbGQodmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xuXG4gIH1cblxuICBzZXRVbmRlcmxpbmUodmFsdWU6IGJvb2xlYW4gPSB0cnVlKTogUHJpbnRTZXJ2aWNlIHtcbiAgICB0aGlzLmJ1aWxkZXIuc2V0VW5kZXJsaW5lKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcblxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZSBsZWZ0fGNlbnRlclxccmlnaHRcbiAgICovXG4gIHNldEp1c3RpZmljYXRpb24odmFsdWU6IHN0cmluZyA9ICdsZWZ0Jyk6IFByaW50U2VydmljZSB7XG4gICAgdGhpcy5idWlsZGVyLnNldEp1c3RpZmljYXRpb24odmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZSBub3JtYWx8bGFyZ2VcbiAgICovXG4gIHNldFNpemUodmFsdWU6IHN0cmluZyA9ICdub3JtYWwnKTogUHJpbnRTZXJ2aWNlIHtcbiAgICB0aGlzLmJ1aWxkZXIuc2V0U2l6ZSh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHRleHRcbiAgICovXG4gIHdyaXRlTGluZSh0ZXh0OiBzdHJpbmcgPSAnJyk6IFByaW50U2VydmljZSB7XG4gICAgdGhpcy5idWlsZGVyLndyaXRlTGluZSh0ZXh0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiB3cml0ZSB0aGUgY3VycmVudCBidWlsZGVyIHZhbHVlIHRvIHRoZSBkcml2ZXIgYW5kIGNsZWFyIG91dCB0aGUgYnVpbGRlclxuICAgKi9cbiAgZmx1c2goKSB7XG4gICAgdGhpcy5kcml2ZXIud3JpdGUodGhpcy5idWlsZGVyLmZsdXNoKCkpO1xuICB9XG59XG4iXX0=